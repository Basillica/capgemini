// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "Backend documentation",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/filter/:title": {
            "post": {
                "description": "Endpoint to filter movies by title",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "filter movies by title",
                "responses": {
                    "200": {
                        "description": "status: authorized\"\t\"success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "login endpoint for the registered user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "login as a user",
                "parameters": [
                    {
                        "description": "login request",
                        "name": "loginRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "token: some really long token\"\t\"success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movie": {
            "post": {
                "description": "endpoint to add a movie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "add a movie",
                "parameters": [
                    {
                        "description": "profile swipe request",
                        "name": "addMovie",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/requests.Movie"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "status: authorized\"\t\"success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movie/:id": {
            "get": {
                "description": "endpoinnt to fetch a movie by its id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "fetch a move by id",
                "responses": {
                    "200": {
                        "description": "status: authorized\"\t\"success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/movies": {
            "get": {
                "description": "endpoint to fetch movies from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "movie"
                ],
                "summary": "fetch movies from the database",
                "responses": {
                    "200": {
                        "description": "status: authorized\"\t\"success",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "403": {
                        "description": "forbidden",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "requests.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6
                },
                "password": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6
                }
            }
        },
        "requests.Movie": {
            "type": "object",
            "required": [
                "characters",
                "director",
                "episode_id",
                "opening_crawl",
                "planets",
                "producer",
                "release_date",
                "species",
                "starships",
                "title",
                "vehicles"
            ],
            "properties": {
                "characters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "created": {
                    "type": "string"
                },
                "director": {
                    "type": "string"
                },
                "edited": {
                    "type": "string"
                },
                "episode_id": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "opening_crawl": {
                    "type": "string"
                },
                "planets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "producer": {
                    "type": "string"
                },
                "release_date": {
                    "type": "string"
                },
                "species": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "starships": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "title": {
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 6
                },
                "url": {
                    "type": "string"
                },
                "vehicles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/api",
	Schemes:          []string{},
	Title:            "Backend api documentation",
	Description:      "The api documentation of the core apis of the backend.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
